import React, { useState, useEffect, useRef } from "react";
import {
  Box,
  Paper,
  IconButton,
  CircularProgress,
  Fab,
  Typography,
  ThemeProvider,
  createTheme,
  TextareaAutosize,
} from "@mui/material";
import SendIcon from "@mui/icons-material/Send";
import KeyboardArrowDownIcon from "@mui/icons-material/KeyboardArrowDown";
import ContentCopyIcon from "@mui/icons-material/ContentCopy";
import CheckIcon from "@mui/icons-material/Check";
import "react-chat-elements/dist/main.css";
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm";
import { atomOneDark, atomOneLight } from "react-syntax-highlighter/dist/esm/styles/hljs";
import Brightness4Icon from "@mui/icons-material/Brightness4"; // Dark mode icon
import Brightness7Icon from "@mui/icons-material/Brightness7"; // Light mode icon
import SyntaxHighlighter from "react-syntax-highlighter";
import toast from "react-hot-toast";

// Define Light and Dark Themes
const lightTheme = createTheme({
  palette: {
    mode: "light",
    primary: {
      main: "#673ab7",
    },
    background: {
      default: "#ffffff",
      paper: "#f5f5f5",
    },
    text: {
      primary: "#000000",
      secondary: "#424242",
    },
  },
});

const darkTheme = createTheme({
  palette: {
    mode: "dark",
    primary: {
      main: "#673ab7",
    },
    background: {
      default: "#121212",
      paper: "#1e1e1e",
    },
    text: {
      primary: "#ffffff",
      secondary: "#b0bec5",
    },
  },
});

export default function ChatComponent({ sessionId, sessionType }) {
  const [inputValue, setInputValue] = useState("");
  const [tasks, setTasks] = useState([]); // Local state for tasks
  const [loading, setLoading] = useState(false);
  const [showScrollButton, setShowScrollButton] = useState(false);
  const [themeMode, setThemeMode] = useState(
    localStorage.getItem("themeMode") || "light"
  ); // Dynamic theme mode
  const [defaultMessage, setDefaultMessage] = useState(""); // Default message based on session type

  const messagesEndRef = useRef(null);
  const chatContainerRef = useRef(null);

  // Toggle between light and dark themes
  const toggleTheme = () => {
    localStorage.setItem("themeMode", themeMode === "light" ? "dark" : "light");
    setThemeMode((prevMode) => (prevMode === "light" ? "dark" : "light"));
  };

  // Scroll to bottom of chat
  const scrollToBottom = () => {
    setTimeout(() => {
      messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    }, 100);
  };

  // Handle scroll button visibility
  const handleScroll = () => {
    if (!chatContainerRef.current) return;
    const { scrollTop, scrollHeight, clientHeight } = chatContainerRef.current;
    setShowScrollButton(scrollHeight - scrollTop > clientHeight + 10);
  };

  useEffect(() => {
    const chatContainer = chatContainerRef.current;
    if (chatContainer) {
      chatContainer.addEventListener("scroll", handleScroll);
      return () => chatContainer.removeEventListener("scroll", handleScroll);
    }
  }, []);

  // Set default message based on session type
  useEffect(() => {
    if (sessionType === "morning") {
      setDefaultMessage("What tasks do you have today?");
    } else if (sessionType === "evening") {
      setDefaultMessage("Hey! Letâ€™s list your tasks.");
    }
  }, [sessionType]);

  // Parse user input for custom commands
  const parseUserInput = (input) => {
    const lowerCaseInput = input.toLowerCase().trim();
    const completionCommands = [
      "done",
      "completed",
      "submitted",
      "submit",
      "submit tasks",
      "ok",
    ];
    const listCommand = "list tasks";
    const clearCommand = "clear tasks";

    if (completionCommands.includes(lowerCaseInput)) {
      return { command: "complete", message: input };
    } else if (lowerCaseInput === listCommand) {
      return { command: "list", message: input };
    } else if (lowerCaseInput === clearCommand) {
      return { command: "clear", message: input };
    } else {
      return { command: "add", message: input }; // Default to adding tasks
    }
  };

  // Handle sending messages
  const handleSend = async () => {
    if (!inputValue.trim()) return;

    const parsedInput = parseUserInput(inputValue);

    switch (parsedInput.command) {
      case "add":
        // Add tasks locally
        const newTasks = inputValue.split(",").map((task) => task.trim());
        setTasks((prevTasks) => [...prevTasks, ...newTasks]);
        toast.success("Tasks added locally.");
        break;

      case "complete":
        // Submit tasks to backend
        setLoading(true);
        try {
          const response = await fetch("/api/chat", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${localStorage.getItem("token")}`,
            },
            body: JSON.stringify({
              sessionId,
              messages: [{ role: "user", content: tasks.join(", ") }],
            }),
          });

          const result = await response.json();
          if (response.ok) {
            toast.success(result.message || "Tasks submitted successfully.");
            setTasks([]); // Clear local tasks after submission
          } else {
            toast.error(result.message || "Failed to submit tasks.");
          }
        } catch (error) {
          console.error("Error submitting tasks:", error);
          toast.error("An error occurred while submitting tasks.");
        } finally {
          setLoading(false);
        }
        break;

      case "list":
        // Display tasks locally
        if (tasks.length === 0) {
          toast.info("No tasks found.");
        } else {
          toast.success(`Current Tasks:\n${tasks.join("\n")}`);
        }
        break;

      case "clear":
        // Clear local tasks
        setTasks([]);
        toast.success("All tasks cleared.");
        break;

      default:
        break;
    }

    scrollToBottom();
    setInputValue(""); // Clear input field
  };

  const handleCopy = (id, text) => {
    navigator.clipboard.writeText(text).then(
      () => {
        toast.success("Copied to clipboard!");
      },
      (err) => console.error("Failed to copy text:", err)
    );
  };

  return (
    <ThemeProvider theme={themeMode === "light" ? lightTheme : darkTheme}>
      <Box
        sx={{
          display: "flex",
          flexDirection: "column",
          height: "100vh",
          padding: 2,
          backgroundColor: themeMode === "light" ? "#ffffff" : "#121212",
        }}
      >
        {/* Header */}
        <Box sx={{ display: "flex", justifyContent: "space-between", mb: 2 }}>
          <Typography variant="h6" color="text.primary">
            Task Management
          </Typography>
          <IconButton onClick={toggleTheme}>
            {themeMode === "light" ? <Brightness4Icon /> : <Brightness7Icon />}
          </IconButton>
        </Box>

        {/* Default Message */}
        <Paper
          sx={{
            p: 2,
            mb: 2,
            backgroundColor: themeMode === "light" ? "#f5f5f5" : "#1e1e1e",
            color: themeMode === "light" ? "#000000" : "#ffffff",
          }}
        >
          <Typography variant="body1">{defaultMessage}</Typography>
        </Paper>

        {/* Task List */}
        <Paper
          sx={{
            flex: 1,
            overflowY: "auto",
            p: 2,
            backgroundColor: themeMode === "light" ? "#f5f5f5" : "#1e1e1e",
          }}
          ref={chatContainerRef}
        >
          {tasks.length === 0 ? (
            <Typography variant="body1" color="text.secondary">
              No tasks yet. Start adding tasks!
            </Typography>
          ) : (
            tasks.map((task, index) => (
              <Typography key={index} variant="body1" color="text.primary">
                - {task}
              </Typography>
            ))
          )}
          <div ref={messagesEndRef} />
        </Paper>

        {/* Input Area */}
        <Box
          sx={{
            display: "flex",
            alignItems: "center",
            mt: 2,
          }}
        >
          <TextareaAutosize
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyDown={(e) => {
              if (e.key === "Enter" && !e.shiftKey) {
                e.preventDefault();
                handleSend();
              }
            }}
            disabled={loading}
            minRows={3}
            maxRows={8}
            style={{
              fontSize: "16px",
              padding: "10px",
              borderRadius: "10px",
              border: "none",
              outline: "none",
              flex: 1,
              backgroundColor: themeMode === "light" ? "#ffffff" : "#333333",
              color: themeMode === "light" ? "#000000" : "#ffffff",
              resize: "none",
            }}
            placeholder="Message ChatGPT..."
          />
          <IconButton
            onClick={handleSend}
            disabled={loading}
            sx={{
              ml: 1,
              color: themeMode === "light" ? "#000000" : "#ffffff",
              backgroundColor: themeMode === "light" ? "#e0e0e0" : "#444444",
              "&:hover": {
                backgroundColor: themeMode === "light" ? "#bdbdbd" : "#666666",
              },
            }}
          >
            {loading ? <CircularProgress size={24} /> : <SendIcon />}
          </IconButton>
        </Box>
      </Box>
    </ThemeProvider>
  );
}